name: Deploy App on AWS using Terraform

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy' # Simulating Environments feature
        required: true
        type: choice
        options:
          - sandbox
          - production

env:
  AWS_REGION: 'ap-southeast-2'
  AWS_ACCOUNT_ID: '123456789012'

jobs:
  # Security scans are configured as 'soft' for the demo purposes
  security-scans:
    name: 'Security scan checks'
    runs-on: ubuntu-latest

    steps:
    - name: 'Checkout GitHub Actions'
      uses: actions/checkout@v4

    - name: 'Checkov Scan'
      uses: bridgecrewio/checkov-action@v12
      with:
        output_format: cli,sarif
        output_file_path: console,results.sarif
      continue-on-error: true

    - name: 'tfsec Scan'
      uses: aquasecurity/tfsec-action@v1.0.3
      continue-on-error: true

    - name: 'Setup TFLint'
      uses: terraform-linters/setup-tflint@v4

    - name: 'Run TFLint'
      run: tflint -f compact
      continue-on-error: true
            

  validate-checks:
    name: 'Terraform checks and validations'
    runs-on: ubuntu-latest
    needs: [security-scans]
    continue-on-error: ${{ github.ref == 'refs/heads/dev' && github.event.inputs.environment == 'sandbox' }}
    steps:
    - name: 'Checkout GitHub Actions'
      uses: actions/checkout@v4

    - name: 'Set up Terraform'
      uses: hashicorp/setup-terraform@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY}}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: 'Terraform FMT'
      run: terraform fmt -check

    - name: 'Terraform Init'
      run: terraform init

    - name: 'Terraform Validate'
      run: terraform validate

  plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    needs: [validate-checks]
    if: github.ref != 'refs/heads/main'
    continue-on-error: ${{ github.ref == 'refs/heads/dev' && github.event.inputs.environment == 'sandbox' }}

    steps:
    - name: 'Checkout GitHub Actions'
      uses: actions/checkout@v4

    - name: 'Set up Terraform'
      uses: hashicorp/setup-terraform@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY}}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: 'Terraform Init'
      run: terraform init

    - name: 'Terraform Plan'
      id: plan
      run: terraform plan -out=terraform.plan

    - name: Upload Terraform state to S3
      run: |
        STATE_FILE=$(terraform output -raw state_file)
        aws s3 cp "$STATE_FILE" "s3://your-s3-bucket/terraform.tfstate"
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        

  apply:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    needs: [validate-checks]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: 'Checkout GitHub Actions'
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY}}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
  
    - name: 'Set up Terraform'
      uses: hashicorp/setup-terraform@v3

    - name: 'Terraform Init'
      run: terraform init

    - name: 'Terraform Apply'
      run: terraform apply -auto-approve